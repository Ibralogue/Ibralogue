### YamlMime:ManagedReference
items:
- uid: Ibralogue.DialogueManager
  commentId: T:Ibralogue.DialogueManager
  id: DialogueManager
  parent: Ibralogue
  children:
  - Ibralogue.DialogueManager.DisplayChoices
  - Ibralogue.DialogueManager.DisplayNextLine
  - Ibralogue.DialogueManager.DisplaySpeakerImage
  - Ibralogue.DialogueManager.GlobalVariables
  - Ibralogue.DialogueManager.OnConversationEnd
  - Ibralogue.DialogueManager.OnConversationStart
  - Ibralogue.DialogueManager.StartConversation(TextAsset,System.Int32)
  langs:
  - csharp
  - vb
  name: DialogueManager
  nameWithType: DialogueManager
  fullName: Ibralogue.DialogueManager
  type: Class
  source:
    id: DialogueManager
    path: ''
    startLine: 19
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  syntax:
    content: 'public class DialogueManager : MonoBehaviour'
    content.vb: >-
      Public Class DialogueManager
          Inherits MonoBehaviour
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Ibralogue.DialogueManager.GlobalVariables
  commentId: F:Ibralogue.DialogueManager.GlobalVariables
  id: GlobalVariables
  parent: Ibralogue.DialogueManager
  langs:
  - csharp
  - vb
  name: GlobalVariables
  nameWithType: DialogueManager.GlobalVariables
  fullName: Ibralogue.DialogueManager.GlobalVariables
  type: Field
  source:
    id: GlobalVariables
    path: ''
    startLine: 22
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  syntax:
    content: public static readonly Dictionary<string, string> GlobalVariables
    return:
      type: Global.Dictionary{System.String,System.String}
    content.vb: Public Shared ReadOnly GlobalVariables As Dictionary(Of String, String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Ibralogue.DialogueManager.OnConversationStart
  commentId: P:Ibralogue.DialogueManager.OnConversationStart
  id: OnConversationStart
  parent: Ibralogue.DialogueManager
  langs:
  - csharp
  - vb
  name: OnConversationStart
  nameWithType: DialogueManager.OnConversationStart
  fullName: Ibralogue.DialogueManager.OnConversationStart
  type: Property
  source:
    id: OnConversationStart
    path: ''
    startLine: 24
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  syntax:
    content: public UnityEvent OnConversationStart { get; set; }
    parameters: []
    return:
      type: Global.UnityEvent
    content.vb: Public Property OnConversationStart As UnityEvent
  overload: Ibralogue.DialogueManager.OnConversationStart*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Ibralogue.DialogueManager.OnConversationEnd
  commentId: P:Ibralogue.DialogueManager.OnConversationEnd
  id: OnConversationEnd
  parent: Ibralogue.DialogueManager
  langs:
  - csharp
  - vb
  name: OnConversationEnd
  nameWithType: DialogueManager.OnConversationEnd
  fullName: Ibralogue.DialogueManager.OnConversationEnd
  type: Property
  source:
    id: OnConversationEnd
    path: ''
    startLine: 25
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  syntax:
    content: public UnityEvent OnConversationEnd { get; set; }
    parameters: []
    return:
      type: Global.UnityEvent
    content.vb: Public Property OnConversationEnd As UnityEvent
  overload: Ibralogue.DialogueManager.OnConversationEnd*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Ibralogue.DialogueManager.StartConversation(TextAsset,System.Int32)
  commentId: M:Ibralogue.DialogueManager.StartConversation(TextAsset,System.Int32)
  id: StartConversation(TextAsset,System.Int32)
  parent: Ibralogue.DialogueManager
  langs:
  - csharp
  - vb
  name: StartConversation(TextAsset, Int32)
  nameWithType: DialogueManager.StartConversation(TextAsset, Int32)
  fullName: Ibralogue.DialogueManager.StartConversation(TextAsset, System.Int32)
  type: Method
  source:
    id: StartConversation
    path: ''
    startLine: 54
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  summary: "\nStarts a dialogue by parsing all the text in a file, clearing the dialogue box and starting the <xref href=\"Ibralogue.DialogueManager.DisplayDialogue\" data-throw-if-not-resolved=\"false\"></xref> function.\n"
  example: []
  syntax:
    content: public void StartConversation(TextAsset interactionDialogue, int startIndex = 0)
    parameters:
    - id: interactionDialogue
      type: Global.TextAsset
      description: The dialogue file that we want to use in the conversation
    - id: startIndex
      type: System.Int32
      description: The index of the conversation you want to start.
    content.vb: Public Sub StartConversation(interactionDialogue As TextAsset, startIndex As Integer = 0)
  overload: Ibralogue.DialogueManager.StartConversation*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Ibralogue.DialogueManager.DisplayNextLine
  commentId: M:Ibralogue.DialogueManager.DisplayNextLine
  id: DisplayNextLine
  parent: Ibralogue.DialogueManager
  langs:
  - csharp
  - vb
  name: DisplayNextLine()
  nameWithType: DialogueManager.DisplayNextLine()
  fullName: Ibralogue.DialogueManager.DisplayNextLine()
  type: Method
  source:
    id: DisplayNextLine
    path: ''
    startLine: 134
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  summary: "\nClears the dialogue box and displays the next <see cref=\"!:Dialogue\"></see> if no sentences are left in the\ncurrent one.\n"
  example: []
  syntax:
    content: public void DisplayNextLine()
    content.vb: Public Sub DisplayNextLine
  overload: Ibralogue.DialogueManager.DisplayNextLine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Ibralogue.DialogueManager.DisplayChoices
  commentId: M:Ibralogue.DialogueManager.DisplayChoices
  id: DisplayChoices
  parent: Ibralogue.DialogueManager
  langs:
  - csharp
  - vb
  name: DisplayChoices()
  nameWithType: DialogueManager.DisplayChoices()
  fullName: Ibralogue.DialogueManager.DisplayChoices()
  type: Method
  source:
    id: DisplayChoices
    path: ''
    startLine: 160
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  summary: "\nUses the Unity UI system and TextMeshPro to render choice buttons.\n"
  example: []
  syntax:
    content: protected void DisplayChoices()
    content.vb: Protected Sub DisplayChoices
  overload: Ibralogue.DialogueManager.DisplayChoices*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Ibralogue.DialogueManager.DisplaySpeakerImage
  commentId: M:Ibralogue.DialogueManager.DisplaySpeakerImage
  id: DisplaySpeakerImage
  parent: Ibralogue.DialogueManager
  langs:
  - csharp
  - vb
  name: DisplaySpeakerImage()
  nameWithType: DialogueManager.DisplaySpeakerImage()
  fullName: Ibralogue.DialogueManager.DisplaySpeakerImage()
  type: Method
  source:
    id: DisplaySpeakerImage
    path: ''
    startLine: 211
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  summary: "\nSets the speaker image and makes the Image transparent if there is no speaker image.\n"
  example: []
  syntax:
    content: protected void DisplaySpeakerImage()
    content.vb: Protected Sub DisplaySpeakerImage
  overload: Ibralogue.DialogueManager.DisplaySpeakerImage*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Ibralogue
  commentId: N:Ibralogue
  name: Ibralogue
  nameWithType: Ibralogue
  fullName: Ibralogue
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Dictionary{System.String,System.String}
  commentId: '!:Global.Dictionary{System.String,System.String}'
  definition: Global.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Ibralogue.DialogueManager.OnConversationStart*
  commentId: Overload:Ibralogue.DialogueManager.OnConversationStart
  name: OnConversationStart
  nameWithType: DialogueManager.OnConversationStart
  fullName: Ibralogue.DialogueManager.OnConversationStart
- uid: Global.UnityEvent
  isExternal: true
  name: UnityEvent
  nameWithType: UnityEvent
  fullName: UnityEvent
- uid: Ibralogue.DialogueManager.OnConversationEnd*
  commentId: Overload:Ibralogue.DialogueManager.OnConversationEnd
  name: OnConversationEnd
  nameWithType: DialogueManager.OnConversationEnd
  fullName: Ibralogue.DialogueManager.OnConversationEnd
- uid: Ibralogue.DialogueManager.DisplayDialogue
  commentId: M:Ibralogue.DialogueManager.DisplayDialogue
  isExternal: true
- uid: Ibralogue.DialogueManager.StartConversation*
  commentId: Overload:Ibralogue.DialogueManager.StartConversation
  name: StartConversation
  nameWithType: DialogueManager.StartConversation
  fullName: Ibralogue.DialogueManager.StartConversation
- uid: Global.TextAsset
  isExternal: true
  name: TextAsset
  nameWithType: TextAsset
  fullName: TextAsset
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Ibralogue.DialogueManager.DisplayNextLine*
  commentId: Overload:Ibralogue.DialogueManager.DisplayNextLine
  name: DisplayNextLine
  nameWithType: DialogueManager.DisplayNextLine
  fullName: Ibralogue.DialogueManager.DisplayNextLine
- uid: Ibralogue.DialogueManager.DisplayChoices*
  commentId: Overload:Ibralogue.DialogueManager.DisplayChoices
  name: DisplayChoices
  nameWithType: DialogueManager.DisplayChoices
  fullName: Ibralogue.DialogueManager.DisplayChoices
- uid: Ibralogue.DialogueManager.DisplaySpeakerImage*
  commentId: Overload:Ibralogue.DialogueManager.DisplaySpeakerImage
  name: DisplaySpeakerImage
  nameWithType: DialogueManager.DisplaySpeakerImage
  fullName: Ibralogue.DialogueManager.DisplaySpeakerImage
