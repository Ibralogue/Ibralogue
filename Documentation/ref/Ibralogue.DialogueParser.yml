### YamlMime:ManagedReference
items:
- uid: Ibralogue.DialogueParser
  commentId: T:Ibralogue.DialogueParser
  id: DialogueParser
  parent: Ibralogue
  children:
  - Ibralogue.DialogueParser.ParseDialogue(TextAsset)
  langs:
  - csharp
  - vb
  name: DialogueParser
  nameWithType: DialogueParser
  fullName: Ibralogue.DialogueParser
  type: Class
  source:
    id: DialogueParser
    path: ''
    startLine: 295
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  syntax:
    content: public static class DialogueParser
    content.vb: Public Module DialogueParser
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Ibralogue.DialogueParser.ParseDialogue(TextAsset)
  commentId: M:Ibralogue.DialogueParser.ParseDialogue(TextAsset)
  id: ParseDialogue(TextAsset)
  parent: Ibralogue.DialogueParser
  langs:
  - csharp
  - vb
  name: ParseDialogue(TextAsset)
  nameWithType: DialogueParser.ParseDialogue(TextAsset)
  fullName: Ibralogue.DialogueParser.ParseDialogue(TextAsset)
  type: Method
  source:
    id: ParseDialogue
    path: ''
    startLine: 351
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue
  summary: "\nThe ParseDialogue function returns an array of conversations and associates information\nwith each element in the dialogue array. Speaker Name, Sentence, Image etc. as well as additional per-conversation metadata.\n"
  example: []
  syntax:
    content: public static List<Conversation> ParseDialogue(TextAsset dialogueAsset)
    parameters:
    - id: dialogueAsset
      type: Global.TextAsset
    return:
      type: Global.List{Conversation}
    content.vb: Public Shared Function ParseDialogue(dialogueAsset As TextAsset) As List(Of Conversation)
  overload: Ibralogue.DialogueParser.ParseDialogue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Ibralogue
  commentId: N:Ibralogue
  name: Ibralogue
  nameWithType: Ibralogue
  fullName: Ibralogue
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Ibralogue.DialogueParser.ParseDialogue*
  commentId: Overload:Ibralogue.DialogueParser.ParseDialogue
  name: ParseDialogue
  nameWithType: DialogueParser.ParseDialogue
  fullName: Ibralogue.DialogueParser.ParseDialogue
- uid: Global.TextAsset
  isExternal: true
  name: TextAsset
  nameWithType: TextAsset
  fullName: TextAsset
- uid: Global.List{Conversation}
  commentId: '!:Global.List{Conversation}'
  definition: Global.List`1
  name: List<Conversation>
  nameWithType: List<Conversation>
  fullName: List<Conversation>
  nameWithType.vb: List(Of Conversation)
  fullName.vb: List(Of Conversation)
  name.vb: List(Of Conversation)
  spec.csharp:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Global.Conversation
    name: Conversation
    nameWithType: Conversation
    fullName: Conversation
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Global.Conversation
    name: Conversation
    nameWithType: Conversation
    fullName: Conversation
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
