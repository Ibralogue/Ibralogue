### YamlMime:ManagedReference
items:
- uid: Ibralogue.Parser.Sentence
  commentId: T:Ibralogue.Parser.Sentence
  id: Sentence
  parent: Ibralogue.Parser
  children:
  - Ibralogue.Parser.Sentence.Invocations
  - Ibralogue.Parser.Sentence.Text
  langs:
  - csharp
  - vb
  name: Sentence
  nameWithType: Sentence
  fullName: Ibralogue.Parser.Sentence
  type: Struct
  source:
    id: Sentence
    path: ''
    startLine: 578
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue.Parser
  syntax:
    content: public struct Sentence
    content.vb: Public Structure Sentence
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Ibralogue.Parser.Sentence.Text
  commentId: F:Ibralogue.Parser.Sentence.Text
  id: Text
  parent: Ibralogue.Parser.Sentence
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: Sentence.Text
  fullName: Ibralogue.Parser.Sentence.Text
  type: Field
  source:
    id: Text
    path: ''
    startLine: 580
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue.Parser
  syntax:
    content: public string Text
    return:
      type: System.String
    content.vb: Public Text As String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Ibralogue.Parser.Sentence.Invocations
  commentId: F:Ibralogue.Parser.Sentence.Invocations
  id: Invocations
  parent: Ibralogue.Parser.Sentence
  langs:
  - csharp
  - vb
  name: Invocations
  nameWithType: Sentence.Invocations
  fullName: Ibralogue.Parser.Sentence.Invocations
  type: Field
  source:
    id: Invocations
    path: ''
    startLine: 581
  assemblies:
  - cs.temp.dll
  namespace: Ibralogue.Parser
  syntax:
    content: public Dictionary<int, string> Invocations
    return:
      type: Global.Dictionary{System.Int32,System.String}
    content.vb: Public Invocations As Dictionary(Of Integer, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Ibralogue.Parser
  commentId: N:Ibralogue.Parser
  name: Ibralogue.Parser
  nameWithType: Ibralogue.Parser
  fullName: Ibralogue.Parser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Dictionary{System.Int32,System.String}
  commentId: '!:Global.Dictionary{System.Int32,System.String}'
  definition: Global.Dictionary`2
  name: Dictionary<Int32, String>
  nameWithType: Dictionary<Int32, String>
  fullName: Dictionary<System.Int32, System.String>
  nameWithType.vb: Dictionary(Of Int32, String)
  fullName.vb: Dictionary(Of System.Int32, System.String)
  name.vb: Dictionary(Of Int32, String)
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
