{
  "index.html": {
    "href": "index.html",
    "title": "| Ibralogue Docs",
    "keywords": "⚠️ Ibralogue is still in pre-release : This means it is not production-ready yet. Feel free to toy around with it but it is subject to rapid changes due to how early it is into development! Manual | Scripting Reference"
  },
  "manual/basic-syntax.html": {
    "href": "manual/basic-syntax.html",
    "title": "Basic Syntax | Ibralogue Docs",
    "keywords": "Basic Syntax Use square brackets to define speaker names. Anything below that is part of the same sentence until the next speaker name is reached, for example: [NPC] Hi! How are you? To move a sentence to the next Dialogue , just use the same speaker name again. [NPC] Hi! [NPC] How are you?"
  },
  "manual/comments.html": {
    "href": "manual/comments.html",
    "title": "Comments | Ibralogue Docs",
    "keywords": "Comments # is used to denote comments. There are no \"block\" comments. # Reminder: Need to rephrase this [NPC] Time to die. Metadata A double-hashtag ## can be used instead to denote metadata. This metadata can then be accessed via the DialogueManager : [NPC] Nice to meet you! ## option-1 ...which can then be accessed via code like so: private void GetOption() { if(dialogueManager.ParsedConversations[0].Lines[0].HasMetadata(\"option-1\")) { Debug.Log(\"Line has the specified metadata string.\"); } } One line can contain more than one piece of metadata, these are separated via spaces: [NPC] This is a sentence with a lot of metadata. ## cool funny epic sad private void GetOption() { foreach(var pair in dialogueManager.ParsedConversations[0].Lines[0].Metadata) { Debug.Log(pair.Key); // will log cool, funny, epic, sad } } Metadata can have keys and values associated with it. [NPC] Today is a sad day. ## emotion:sad"
  },
  "manual/global-variables.html": {
    "href": "manual/global-variables.html",
    "title": "Global Variables | Ibralogue Docs",
    "keywords": "Global Variables Global variables allow for predefined variables that can be used in dialogues for things like player names and other options that can be chosen or changed at runtime. They would be defined in the code like so: private void Awake() => DialogueManager.GlobalVariables.Add(\"PLAYERNAME\",\"Ibrahim\"); and would be declared in .ibra files like so: [NPC] Hi, $PLAYERNAME. [$PLAYERNAME] Hi. What's up?"
  },
  "manual/invocations.html": {
    "href": "manual/invocations.html",
    "title": "Invocations | Ibralogue Docs",
    "keywords": "Invocations Invocations are a very powerful feature in Ibralogue. They allow you to invoke static functions directly from Ibralogue, and also to define character portraits. they are enclosed like so: {{Foo}} . The type of the invocation and name are separated between colons. If the type of an invocation is not supplied, it will automatically be inferred as a function invocation. Function Invocation Static functions can be invoked directly from Ibralogue. To set up a static function to be recognized by Ibralogue, add the DialogueFunction attribute like so: [DialogueFunction] public static void Die() { Debug.Log(\"Dead.\"); } ...and invoking the function is extremely simple! It would look something like this: [NPC] Time To Die. {{Die}} Image Invocation Character portraits are really important in a lot of story games, and Ibralogue cant forget them. Ibralogue makes use of Resources.Load to load images directly from dialogue files. To use Image invocations, make a Resources folder anywhere in your project and then specify directories relative from that folder in the dialogue file. For example: With a file located in ./Assets/Sprites/Resources/CharacterPortraits/AvaSmiling.png , do: [Ava] {{Image(CharacterPortraits/AvaSmiling.png)}} It's a beautiful day outside! Choice Invocations {{DialogueName(Foo)}} allows you to specify the name of a given Conversation . This is required for branching dialogue so the interpreter knows what conversation to branch to. For example: {{DialogueName(Initial)}} [NPC] Time To Die - No -> Denial - Sure -> Acceptance {{DialogueName(Denial)}} [Player] Did you really think... I came this far... [Player] To give up now? HAHAHAHA {{DialogueName(Acceptance)}} [Player] Y'know what? [Player] Maybe you're right... I am tired of life."
  },
  "manual/quickstart.html": {
    "href": "manual/quickstart.html",
    "title": "Quickstart | Ibralogue Docs",
    "keywords": "Quickstart Add an empty GameObject with the component DialogueManager to your scene and assign its required references. Add a button, give it the SingleInteraction component, and assign its reference to the DialogueManager . Assign the button component's callback to DialogueInteraction.StartDialogue . For the Interaction Dialogue reference, create a new Ibralogue file from the create menu like so: ...and then assign it to the Interaction Dialogue reference. Open the Ibralogue file you have created and it should look something like this: {{DialogueName(Init)}} [NPC] Hello World! For some more information on the syntax of the dialogue files, take a look at the Syntax Guide ."
  },
  "ref/Ibralogue.DialogueFunctionAttribute.html": {
    "href": "ref/Ibralogue.DialogueFunctionAttribute.html",
    "title": "Class DialogueFunctionAttribute | Ibralogue Docs",
    "keywords": "Class DialogueFunctionAttribute Inheritance Object Attribute DialogueFunctionAttribute Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public class DialogueFunctionAttribute : Attribute, _Attribute"
  },
  "ref/Ibralogue.DialogueManager.html": {
    "href": "ref/Ibralogue.DialogueManager.html",
    "title": "Class DialogueManager | Ibralogue Docs",
    "keywords": "Class DialogueManager Inheritance Object DialogueManager Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public class DialogueManager : MonoBehaviour Fields GlobalVariables Declaration public static readonly Dictionary<string, string> GlobalVariables Field Value Type Description Dictionary < String , String > Properties OnConversationEnd Declaration public UnityEvent OnConversationEnd { get; set; } Property Value Type Description UnityEvent OnConversationStart Declaration public UnityEvent OnConversationStart { get; set; } Property Value Type Description UnityEvent Methods DisplayChoices() Uses the Unity UI system and TextMeshPro to render choice buttons. Declaration protected void DisplayChoices() DisplayNextLine() Clears the dialogue box and displays the next if no sentences are left in the current one. Declaration public void DisplayNextLine() DisplaySpeakerImage() Sets the speaker image and makes the Image transparent if there is no speaker image. Declaration protected void DisplaySpeakerImage() StartConversation(TextAsset, Int32) Starts a dialogue by parsing all the text in a file, clearing the dialogue box and starting the Ibralogue.DialogueManager.DisplayDialogue function. Declaration public void StartConversation(TextAsset interactionDialogue, int startIndex = 0) Parameters Type Name Description TextAsset interactionDialogue The dialogue file that we want to use in the conversation Int32 startIndex The index of the conversation you want to start."
  },
  "ref/Ibralogue.DialogueParser.html": {
    "href": "ref/Ibralogue.DialogueParser.html",
    "title": "Class DialogueParser | Ibralogue Docs",
    "keywords": "Class DialogueParser Inheritance Object DialogueParser Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public static class DialogueParser Methods ParseDialogue(TextAsset) The ParseDialogue function returns an array of conversations and associates information with each element in the dialogue array (Speaker Name, Sentence, Image etc.) as well as additional metadata. Declaration public static List<Conversation> ParseDialogue(TextAsset dialogueAsset) Parameters Type Name Description TextAsset dialogueAsset Returns Type Description List < Conversation >"
  },
  "ref/Ibralogue.html": {
    "href": "ref/Ibralogue.html",
    "title": "Namespace Ibralogue | Ibralogue Docs",
    "keywords": "Namespace Ibralogue Classes DialogueFunctionAttribute DialogueManager DialogueParser"
  },
  "ref/Ibralogue.Interactions.DefaultInteraction.html": {
    "href": "ref/Ibralogue.Interactions.DefaultInteraction.html",
    "title": "Class DefaultInteraction | Ibralogue Docs",
    "keywords": "Class DefaultInteraction The base class that is inherited over by other interactions. This class is not meant to directly be added to a GameObject. Inheritance Object DefaultInteraction GlobalVariableInteraction RandomInteraction RoundRobinInteraction Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public abstract class DefaultInteraction : MonoBehaviour Fields dialogueManager Declaration protected DialogueManager dialogueManager Field Value Type Description DialogueManager InteractionDialogues Declaration protected TextAsset[] InteractionDialogues Field Value Type Description TextAsset [] Methods StartDialogue() Declaration public virtual void StartDialogue()"
  },
  "ref/Ibralogue.Interactions.GlobalVariableInteraction.html": {
    "href": "ref/Ibralogue.Interactions.GlobalVariableInteraction.html",
    "title": "Class GlobalVariableInteraction | Ibralogue Docs",
    "keywords": "Class GlobalVariableInteraction Adds a global variable key-value pair and plays the very first conversation in the interaction dialogue array. Inheritance Object DefaultInteraction GlobalVariableInteraction Inherited Members DefaultInteraction.dialogueManager DefaultInteraction.InteractionDialogues Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public class GlobalVariableInteraction : DefaultInteraction Methods StartDialogue() Declaration public override void StartDialogue() Overrides DefaultInteraction.StartDialogue()"
  },
  "ref/Ibralogue.Interactions.html": {
    "href": "ref/Ibralogue.Interactions.html",
    "title": "Namespace Ibralogue.Interactions | Ibralogue Docs",
    "keywords": "Namespace Ibralogue.Interactions Classes DefaultInteraction The base class that is inherited over by other interactions. This class is not meant to directly be added to a GameObject. GlobalVariableInteraction Adds a global variable key-value pair and plays the very first conversation in the interaction dialogue array. RandomInteraction Plays a random dialogue from within the interaction dialogue array. RoundRobinInteraction Loops through each dialogue one by one and stops at the last one unless \"Loop\" is checked in which case it starts from the first dialogue."
  },
  "ref/Ibralogue.Interactions.RandomInteraction.html": {
    "href": "ref/Ibralogue.Interactions.RandomInteraction.html",
    "title": "Class RandomInteraction | Ibralogue Docs",
    "keywords": "Class RandomInteraction Plays a random dialogue from within the interaction dialogue array. Inheritance Object DefaultInteraction RandomInteraction Inherited Members DefaultInteraction.dialogueManager DefaultInteraction.InteractionDialogues Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public class RandomInteraction : DefaultInteraction Methods StartDialogue() Declaration public override void StartDialogue() Overrides DefaultInteraction.StartDialogue()"
  },
  "ref/Ibralogue.Interactions.RoundRobinInteraction.html": {
    "href": "ref/Ibralogue.Interactions.RoundRobinInteraction.html",
    "title": "Class RoundRobinInteraction | Ibralogue Docs",
    "keywords": "Class RoundRobinInteraction Loops through each dialogue one by one and stops at the last one unless \"Loop\" is checked in which case it starts from the first dialogue. Inheritance Object DefaultInteraction RoundRobinInteraction Inherited Members DefaultInteraction.dialogueManager DefaultInteraction.InteractionDialogues Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public class RoundRobinInteraction : DefaultInteraction Methods StartDialogue() Declaration public override void StartDialogue() Overrides DefaultInteraction.StartDialogue()"
  },
  "ref/Ibralogue.Parser.Choice.html": {
    "href": "ref/Ibralogue.Parser.Choice.html",
    "title": "Struct Choice | Ibralogue Docs",
    "keywords": "Struct Choice Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public struct Choice Fields ChoiceName Declaration public string ChoiceName Field Value Type Description String LeadingConversationName Declaration public string LeadingConversationName Field Value Type Description String"
  },
  "ref/Ibralogue.Parser.Conversation.html": {
    "href": "ref/Ibralogue.Parser.Conversation.html",
    "title": "Struct Conversation | Ibralogue Docs",
    "keywords": "Struct Conversation Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public struct Conversation Fields Choices Declaration public Dictionary<Choice, int> Choices Field Value Type Description Dictionary < Choice , Int32 > Dialogues Declaration public List<Dialogue> Dialogues Field Value Type Description List < Dialogue > Name Declaration public string Name Field Value Type Description String"
  },
  "ref/Ibralogue.Parser.Dialogue.html": {
    "href": "ref/Ibralogue.Parser.Dialogue.html",
    "title": "Struct Dialogue | Ibralogue Docs",
    "keywords": "Struct Dialogue The Dialogue struct contains information about an individual line of dialogue. Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public struct Dialogue Remarks A list of these Dialogue structs makes up a conversation, and a list of conversations makes up a single dialogue file, due to being able to have multiple conversations in a single file for dialogue branching. Fields Sentence Declaration public Sentence Sentence Field Value Type Description Sentence Speaker Declaration public string Speaker Field Value Type Description String SpeakerImage Declaration public Sprite SpeakerImage Field Value Type Description Sprite"
  },
  "ref/Ibralogue.Parser.html": {
    "href": "ref/Ibralogue.Parser.html",
    "title": "Namespace Ibralogue.Parser | Ibralogue Docs",
    "keywords": "Namespace Ibralogue.Parser Structs Choice Conversation Dialogue The Dialogue struct contains information about an individual line of dialogue. Sentence"
  },
  "ref/Ibralogue.Parser.Sentence.html": {
    "href": "ref/Ibralogue.Parser.Sentence.html",
    "title": "Struct Sentence | Ibralogue Docs",
    "keywords": "Struct Sentence Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public struct Sentence Fields Invocations Declaration public Dictionary<int, string> Invocations Field Value Type Description Dictionary < Int32 , String > Text Declaration public string Text Field Value Type Description String"
  }
}