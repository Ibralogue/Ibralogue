{
  "index.html": {
    "href": "index.html",
    "title": "| Ibralogue Docs",
    "keywords": "⚠️ Ibralogue is still in pre-release : This means it is not production-ready yet. Feel free to toy around with it but it is subject to rapid changes due to how early it is into development! Manual | Scripting Reference"
  },
  "manual/basic-syntax.html": {
    "href": "manual/basic-syntax.html",
    "title": "Basic Syntax | Ibralogue Docs",
    "keywords": "Basic Syntax Use square brackets to define speaker names. Anything below that is part of the same sentence until the next speaker name is reached, for example: [NPC] Hi! How are you? To move a sentence to the next Dialogue , just use the same speaker name again. [NPC] Hi! [NPC] How are you?"
  },
  "manual/comments.html": {
    "href": "manual/comments.html",
    "title": "Comments | Ibralogue Docs",
    "keywords": "Comments # is used to denote comments. There are no \"block\" comments. # Reminder: Need to rephrase this [NPC] Time to die. Metadata A double-hashtag ## can be used instead to denote metadata. This metadata can then be accessed via the DialogueManager : [NPC] Nice to meet you! ## option-1 ...which can then be accessed via code like so: private void GetOption() { if(dialogueManager.ParsedConversations[0].Lines[0].HasMetadata(\"option-1\")) { Debug.Log(\"Line has the specified metadata string.\"); } } One line can contain more than one piece of metadata, these are separated via spaces: [NPC] This is a sentence with a lot of metadata. ## cool funny epic sad private void GetOption() { foreach(var pair in dialogueManager.ParsedConversations[0].Lines[0].Metadata) { Debug.Log(pair.Key); // will log cool, funny, epic, sad } } Metadata can have keys and values associated with it. [NPC] Today is a sad day. ## emotion:sad"
  },
  "manual/global-variables.html": {
    "href": "manual/global-variables.html",
    "title": "Global Variables | Ibralogue Docs",
    "keywords": "Global Variables Global variables allow for predefined variables that can be used in dialogues for things like player names and other options that can be chosen or changed at runtime. They would be defined in the code like so: private void Awake() => DialogueManager.GlobalVariables.Add(\"PLAYERNAME\",\"Ibrahim\"); and would be declared in .ibra files like so: [NPC] Hi, $PLAYERNAME. [$PLAYERNAME] Hi. What's up?"
  },
  "manual/invocations.html": {
    "href": "manual/invocations.html",
    "title": "Invocations | Ibralogue Docs",
    "keywords": "Invocations Invocations are a very powerful feature in Ibralogue. They allow you to invoke static functions directly from Ibralogue, and also to define character portraits. they are enclosed like so: {{Foo}} . The type of the invocation and name are separated between colons. If the type of an invocation is not supplied, it will automatically be inferred as a function invocation. Function Invocation Static functions can be invoked directly from Ibralogue. To set up a static function to be recognized by Ibralogue, add the DialogueFunction attribute like so: [DialogueFunction] public static void Die() { Debug.Log(\"Dead.\"); } ...and invoking the function is extremely simple! It would look something like this: [NPC] Time To Die. {{Die}} Image Invocation Character portraits are really important in a lot of story games, and Ibralogue cant forget them. Ibralogue makes use of Resources.Load to load images directly from dialogue files. To use Image invocations, make a Resources folder anywhere in your project and then specify directories relative from that folder in the dialogue file. For example: With a file located in ./Assets/Sprites/Resources/CharacterPortraits/AvaSmiling.png , do: [Ava] {{Image(CharacterPortraits/AvaSmiling.png)}} It's a beautiful day outside! Choice Invocations {{DialogueName(Foo)}} allows you to specify the name of a given Conversation . This is required for branching dialogue so the interpreter knows what conversation to branch to. For example: {{DialogueName(Initial)}} [NPC] Time To Die - No -> Denial - Sure -> Acceptance {{DialogueName(Denial)}} [Player] Did you really think... I came this far... [Player] To give up now? HAHAHAHA {{DialogueName(Acceptance)}} [Player] Y'know what? [Player] Maybe you're right... I am tired of life."
  },
  "manual/quickstart.html": {
    "href": "manual/quickstart.html",
    "title": "Quickstart | Ibralogue Docs",
    "keywords": "Quickstart Add an empty GameObject with the component DialogueManager to your scene and assign its required references. Add a button, give it the SingleInteraction component, and assign its reference to the DialogueManager . Assign the button component's callback to DialogueInteraction.StartDialogue . For the Interaction Dialogue reference, create a new Ibralogue file from the create menu like so: ...and then assign it to the Interaction Dialogue reference. Open the Ibralogue file you have created and it should look something like this: {{DialogueName(Init)}} [NPC] Hello World!"
  },
  "ref/Ibralogue.DialogueFunctionAttribute.html": {
    "href": "ref/Ibralogue.DialogueFunctionAttribute.html",
    "title": "Class DialogueFunctionAttribute | Ibralogue Docs",
    "keywords": "Class DialogueFunctionAttribute Applied to any method to enable it to be invoked. Inheritance Object DialogueFunctionAttribute Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public class DialogueFunctionAttribute : Attribute"
  },
  "ref/Ibralogue.DialogueGlobals.html": {
    "href": "ref/Ibralogue.DialogueGlobals.html",
    "title": "Class DialogueGlobals | Ibralogue Docs",
    "keywords": "Class DialogueGlobals Inheritance Object DialogueGlobals Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public static class DialogueGlobals Fields GlobalVariables Declaration public static readonly Dictionary<string, string> GlobalVariables Field Value Type Description Dictionary < String , String >"
  },
  "ref/Ibralogue.DialogueLogger.html": {
    "href": "ref/Ibralogue.DialogueLogger.html",
    "title": "Class DialogueLogger | Ibralogue Docs",
    "keywords": "Class DialogueLogger Inheritance Object DialogueLogger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public static class DialogueLogger Methods LogError(Int32, String, Object) Declaration public static void LogError(int line, string message, Object context = null) Parameters Type Name Description Int32 line String message Object context"
  },
  "ref/Ibralogue.DialogueManagerBase-1.ChoiceButtonHandle.html": {
    "href": "ref/Ibralogue.DialogueManagerBase-1.ChoiceButtonHandle.html",
    "title": "Class DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle | Ibralogue Docs",
    "keywords": "Class DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle Represent a single spawned choice button, contains general information about said button Inheritance Object DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax protected class ChoiceButtonHandle Constructors ChoiceButtonHandle(ChoiceButtonT, UnityAction) Declaration public ChoiceButtonHandle(ChoiceButtonT choiceButton, UnityAction clickCallback) Parameters Type Name Description ChoiceButtonT choiceButton UnityAction clickCallback Properties ChoiceButton Declaration public ChoiceButtonT ChoiceButton { get; } Property Value Type Description ChoiceButtonT ClickCallback Declaration public UnityAction ClickCallback { get; } Property Value Type Description UnityAction ClickEvent Declaration public UnityEvent ClickEvent { get; set; } Property Value Type Description UnityEvent"
  },
  "ref/Ibralogue.DialogueManagerBase-1.html": {
    "href": "ref/Ibralogue.DialogueManagerBase-1.html",
    "title": "Class DialogueManagerBase<ChoiceButtonT> | Ibralogue Docs",
    "keywords": "Class DialogueManagerBase<ChoiceButtonT> Inheritance Object DialogueManagerBase<ChoiceButtonT> SimpleDialogueManager Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public abstract class DialogueManagerBase<ChoiceButtonT> : MonoBehaviour where ChoiceButtonT : Component Type Parameters Name Description ChoiceButtonT Fields _choiceButtonInstances Declaration protected List<DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle> _choiceButtonInstances Field Value Type Description List < DialogueManagerBase.ChoiceButtonHandle <>> _currentConversation Declaration protected Conversation _currentConversation Field Value Type Description Conversation _lineIndex Declaration protected int _lineIndex Field Value Type Description Int32 _linePlaying Declaration protected bool _linePlaying Field Value Type Description Boolean choiceButton Declaration protected ChoiceButtonT choiceButton Field Value Type Description ChoiceButtonT choiceButtonHolder Declaration protected Transform choiceButtonHolder Field Value Type Description Transform nameText Declaration protected TextMeshProUGUI nameText Field Value Type Description TextMeshProUGUI scrollSpeed Declaration protected float scrollSpeed Field Value Type Description Single sentenceText Declaration protected TextMeshProUGUI sentenceText Field Value Type Description TextMeshProUGUI speakerPortrait Declaration protected Image speakerPortrait Field Value Type Description Image Properties OnConversationEnd Declaration public UnityEvent OnConversationEnd { get; set; } Property Value Type Description UnityEvent OnConversationStart Declaration public UnityEvent OnConversationStart { get; set; } Property Value Type Description UnityEvent ParsedConversations Declaration public List<Conversation> ParsedConversations { get; protected set; } Property Value Type Description List < Conversation > Methods ClearChoiceButton(DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle) Declaration protected virtual void ClearChoiceButton(DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle buttonHandle) Parameters Type Name Description DialogueManagerBase.ChoiceButtonHandle <> buttonHandle ClearDialogueBox() Clears all text and Images in the dialogue box. Declaration protected virtual void ClearDialogueBox() CreateChoiceButton() Declaration protected virtual ChoiceButtonT CreateChoiceButton() Returns Type Description ChoiceButtonT DisplayChoices() Uses the Unity UI system and TextMeshPro to render choice buttons. Declaration protected void DisplayChoices() DisplayDialogue() Declaration protected virtual IEnumerator DisplayDialogue() Returns Type Description IEnumerator DisplaySpeakerImage() Sets the speaker image and makes the Image transparent if there is no speaker image. Declaration protected void DisplaySpeakerImage() GetDialogueMethods() Gets all methods for the current assembly, other specified assemblies, or all assemblies, and checks them against the DialogueFunction attribute. Declaration protected IEnumerable<MethodInfo> GetDialogueMethods() Returns Type Description IEnumerable < MethodInfo > InvokeFunctions(Dictionary<Int32, String>) Looks for functions and invokes them in a given line. The function also handles multiple return types and the parameters passed in. Declaration protected virtual void InvokeFunctions(Dictionary<int, string> functionInvocations) Parameters Type Name Description Dictionary < Int32 , String > functionInvocations The invocations inside the current line being displayed. JumpTo(String) Jumps to a given conversation in the dialogue by using its name. Declaration public void JumpTo(string conversationName) Parameters Type Name Description String conversationName Name as seen in the DialogueAsset PrepareChoiceButton(DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle, Choice) Declaration protected abstract void PrepareChoiceButton(DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle handle, Choice choice) Parameters Type Name Description DialogueManagerBase.ChoiceButtonHandle <> handle Choice choice RemoveChoiceButton(DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle) Declaration protected virtual void RemoveChoiceButton(DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle buttonHandle) Parameters Type Name Description DialogueManagerBase.ChoiceButtonHandle <> buttonHandle StartConversation(DialogueAsset, Int32) Starts a dialogue by parsing all the text in a file, clearing the dialogue box and starting the DisplayDialogue() function. Declaration public void StartConversation(DialogueAsset interactionDialogue, int startIndex = 0) Parameters Type Name Description DialogueAsset interactionDialogue The dialogue file that we want to use in the conversation Int32 startIndex The index of the conversation you want to start. StopConversation() Stops the currently playing conversation and clears the dialogue box. Declaration public void StopConversation() TryDisplayNextLine() Clears the dialogue box and displays the next line if no sentences are left in the current one. Declaration public void TryDisplayNextLine()"
  },
  "ref/Ibralogue.DialogueParser.html": {
    "href": "ref/Ibralogue.DialogueParser.html",
    "title": "Class DialogueParser | Ibralogue Docs",
    "keywords": "Class DialogueParser Inheritance Object DialogueParser Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public static class DialogueParser Methods ParseDialogue(DialogueAsset) Returns an array of conversations and associates n with each element in the dialogue array e.g: (Speaker Name, Sentence, Image etc.) as well as additional metadata. Declaration public static List<Conversation> ParseDialogue(DialogueAsset dialogueAsset) Parameters Type Name Description DialogueAsset dialogueAsset Returns Type Description List < Conversation >"
  },
  "ref/Ibralogue.Editor.CreateIbralogue.html": {
    "href": "ref/Ibralogue.Editor.CreateIbralogue.html",
    "title": "Class CreateIbralogue | Ibralogue Docs",
    "keywords": "Class CreateIbralogue Inheritance Object CreateIbralogue Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue.Editor Assembly : cs.temp.dll.dll Syntax public static class CreateIbralogue Methods CreateDialogue() Creates an Ibralogue file using Unity's function. Declaration public static void CreateDialogue()"
  },
  "ref/Ibralogue.Editor.html": {
    "href": "ref/Ibralogue.Editor.html",
    "title": "Namespace Ibralogue.Editor | Ibralogue Docs",
    "keywords": "Namespace Ibralogue.Editor Classes CreateIbralogue IbralogueImporter"
  },
  "ref/Ibralogue.Editor.IbralogueImporter.html": {
    "href": "ref/Ibralogue.Editor.IbralogueImporter.html",
    "title": "Class IbralogueImporter | Ibralogue Docs",
    "keywords": "Class IbralogueImporter Inheritance Object IbralogueImporter Namespace : Ibralogue.Editor Assembly : cs.temp.dll.dll Syntax public class IbralogueImporter : ScriptedImporter Methods OnImportAsset(AssetImportContext) Creates an instance of a scriptable object of type and adds the contents of ctx file to the asset. Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description AssetImportContext ctx The context for importing the asset."
  },
  "ref/Ibralogue.html": {
    "href": "ref/Ibralogue.html",
    "title": "Namespace Ibralogue | Ibralogue Docs",
    "keywords": "Namespace Ibralogue Classes DialogueFunctionAttribute Applied to any method to enable it to be invoked. DialogueGlobals DialogueLogger DialogueManagerBase<ChoiceButtonT> DialogueManagerBase<ChoiceButtonT>.ChoiceButtonHandle Represent a single spawned choice button, contains general information about said button DialogueParser SimpleDialogueManager TypewriterDialogueManager Interfaces IMetadata"
  },
  "ref/Ibralogue.IMetadata.html": {
    "href": "ref/Ibralogue.IMetadata.html",
    "title": "Interface IMetadata | Ibralogue Docs",
    "keywords": "Interface IMetadata Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public interface IMetadata Methods HasMetadata(String) Check if entity contains any metadata. Declaration bool HasMetadata(string key) Parameters Type Name Description String key Returns Type Description Boolean TryGetMetadataValue(String, out String) Declaration bool TryGetMetadataValue(string key, out string value) Parameters Type Name Description String key String value Returns Type Description Boolean"
  },
  "ref/Ibralogue.Interactions.BaseInteraction.html": {
    "href": "ref/Ibralogue.Interactions.BaseInteraction.html",
    "title": "Class BaseInteraction | Ibralogue Docs",
    "keywords": "Class BaseInteraction The base class that is inherited over by other interactions. This class is not meant to directly be added to a GameObject. Inheritance Object BaseInteraction CircularInteraction RandomInteraction SingleInteraction Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public abstract class BaseInteraction : MonoBehaviour Fields dialogueManager Declaration protected SimpleDialogueManager dialogueManager Field Value Type Description SimpleDialogueManager InteractionDialogues Declaration protected DialogueAsset[] InteractionDialogues Field Value Type Description DialogueAsset [] Methods StartDialogue() Declaration public virtual void StartDialogue()"
  },
  "ref/Ibralogue.Interactions.CircularInteraction.html": {
    "href": "ref/Ibralogue.Interactions.CircularInteraction.html",
    "title": "Class CircularInteraction | Ibralogue Docs",
    "keywords": "Class CircularInteraction Loops through each dialogue one by one. Inheritance Object BaseInteraction CircularInteraction Inherited Members BaseInteraction.dialogueManager BaseInteraction.InteractionDialogues Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public class CircularInteraction : BaseInteraction Methods StartDialogue() Declaration public override void StartDialogue() Overrides BaseInteraction.StartDialogue()"
  },
  "ref/Ibralogue.Interactions.html": {
    "href": "ref/Ibralogue.Interactions.html",
    "title": "Namespace Ibralogue.Interactions | Ibralogue Docs",
    "keywords": "Namespace Ibralogue.Interactions Classes BaseInteraction The base class that is inherited over by other interactions. This class is not meant to directly be added to a GameObject. CircularInteraction Loops through each dialogue one by one. RandomInteraction Plays a random dialogue from within the interaction dialogue array. SingleInteraction Place the first conversation of a Dialogue file."
  },
  "ref/Ibralogue.Interactions.RandomInteraction.html": {
    "href": "ref/Ibralogue.Interactions.RandomInteraction.html",
    "title": "Class RandomInteraction | Ibralogue Docs",
    "keywords": "Class RandomInteraction Plays a random dialogue from within the interaction dialogue array. Inheritance Object BaseInteraction RandomInteraction Inherited Members BaseInteraction.dialogueManager BaseInteraction.InteractionDialogues Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public class RandomInteraction : BaseInteraction Methods StartDialogue() Declaration public override void StartDialogue() Overrides BaseInteraction.StartDialogue()"
  },
  "ref/Ibralogue.Interactions.SingleInteraction.html": {
    "href": "ref/Ibralogue.Interactions.SingleInteraction.html",
    "title": "Class SingleInteraction | Ibralogue Docs",
    "keywords": "Class SingleInteraction Place the first conversation of a Dialogue file. Inheritance Object BaseInteraction SingleInteraction Inherited Members BaseInteraction.dialogueManager BaseInteraction.InteractionDialogues Namespace : Ibralogue.Interactions Assembly : cs.temp.dll.dll Syntax public class SingleInteraction : BaseInteraction Methods StartDialogue() Declaration public override void StartDialogue() Overrides BaseInteraction.StartDialogue()"
  },
  "ref/Ibralogue.Parser.Choice.html": {
    "href": "ref/Ibralogue.Parser.Choice.html",
    "title": "Class Choice | Ibralogue Docs",
    "keywords": "Class Choice The choice class defines an option that can lead to a conversation. Inheritance Object Choice Implements IMetadata Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public class Choice : IMetadata Fields ChoiceName Declaration public string ChoiceName Field Value Type Description String LeadingConversationName Declaration public string LeadingConversationName Field Value Type Description String Metadata Declaration public Dictionary<string, string> Metadata Field Value Type Description Dictionary < String , String > Methods HasMetadata(String) Declaration public bool HasMetadata(string key) Parameters Type Name Description String key Returns Type Description Boolean TryGetMetadataValue(String, out String) Declaration public bool TryGetMetadataValue(string key, out string value) Parameters Type Name Description String key String value Returns Type Description Boolean Implements IMetadata"
  },
  "ref/Ibralogue.Parser.Conversation.html": {
    "href": "ref/Ibralogue.Parser.Conversation.html",
    "title": "Class Conversation | Ibralogue Docs",
    "keywords": "Class Conversation A Conversation is a block of lines with a name associated with it that can lead to other Conversation's. Inheritance Object Conversation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public class Conversation Fields Choices Declaration public Dictionary<Choice, int> Choices Field Value Type Description Dictionary < Choice , Int32 > Lines Declaration public List<Line> Lines Field Value Type Description List < Line > Name Declaration public string Name Field Value Type Description String"
  },
  "ref/Ibralogue.Parser.DialogueAsset.html": {
    "href": "ref/Ibralogue.Parser.DialogueAsset.html",
    "title": "Class DialogueAsset | Ibralogue Docs",
    "keywords": "Class DialogueAsset Scriptable object that stores the context of the entire dialogue file inside it. Inheritance Object DialogueAsset Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public class DialogueAsset : ScriptableObject Properties Content Declaration public string Content { get; } Property Value Type Description String"
  },
  "ref/Ibralogue.Parser.html": {
    "href": "ref/Ibralogue.Parser.html",
    "title": "Namespace Ibralogue.Parser | Ibralogue Docs",
    "keywords": "Namespace Ibralogue.Parser Classes Choice The choice class defines an option that can lead to a conversation. Conversation A Conversation is a block of lines with a name associated with it that can lead to other Conversation's. DialogueAsset Scriptable object that stores the context of the entire dialogue file inside it. Line The Line struct contains information about an individual line of dialogue. Structs LineContent The internal contents of a line, including but not limited its text and metadata"
  },
  "ref/Ibralogue.Parser.Line.html": {
    "href": "ref/Ibralogue.Parser.Line.html",
    "title": "Class Line | Ibralogue Docs",
    "keywords": "Class Line The Line struct contains information about an individual line of dialogue. Inheritance Object Line Implements IMetadata Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public class Line : IMetadata Remarks A list of these Line structs makes up a conversation, and a list of conversations makes up a single dialogue file, due to being able to have multiple conversations in a single file for dialogue branching. Fields LineContent Declaration public LineContent LineContent Field Value Type Description LineContent Speaker Declaration public string Speaker Field Value Type Description String SpeakerImage Declaration public Sprite SpeakerImage Field Value Type Description Sprite Methods HasMetadata(String) Declaration public bool HasMetadata(string key) Parameters Type Name Description String key Returns Type Description Boolean TryGetMetadataValue(String, out String) Declaration public bool TryGetMetadataValue(string key, out string value) Parameters Type Name Description String key String value Returns Type Description Boolean Implements IMetadata"
  },
  "ref/Ibralogue.Parser.LineContent.html": {
    "href": "ref/Ibralogue.Parser.LineContent.html",
    "title": "Struct LineContent | Ibralogue Docs",
    "keywords": "Struct LineContent The internal contents of a line, including but not limited its text and metadata Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Ibralogue.Parser Assembly : cs.temp.dll.dll Syntax public struct LineContent Fields Invocations Declaration public Dictionary<int, string> Invocations Field Value Type Description Dictionary < Int32 , String > Metadata Declaration public Dictionary<string, string> Metadata Field Value Type Description Dictionary < String , String > Text Declaration public string Text Field Value Type Description String"
  },
  "ref/Ibralogue.SimpleDialogueManager.html": {
    "href": "ref/Ibralogue.SimpleDialogueManager.html",
    "title": "Class SimpleDialogueManager | Ibralogue Docs",
    "keywords": "Class SimpleDialogueManager Inheritance Object DialogueManagerBase < Button > SimpleDialogueManager TypewriterDialogueManager Inherited Members DialogueManagerBase<Button>.OnConversationStart DialogueManagerBase<Button>.OnConversationEnd DialogueManagerBase<Button>.ParsedConversations DialogueManagerBase<Button>._currentConversation DialogueManagerBase<Button>._lineIndex DialogueManagerBase<Button>._linePlaying DialogueManagerBase<Button>.scrollSpeed DialogueManagerBase<Button>.nameText DialogueManagerBase<Button>.sentenceText DialogueManagerBase<Button>.speakerPortrait DialogueManagerBase<Button>.choiceButtonHolder DialogueManagerBase<Button>.choiceButton DialogueManagerBase<Button>._choiceButtonInstances DialogueManagerBase<Button>.StartConversation(DialogueAsset, Int32) DialogueManagerBase<Button>.StopConversation() DialogueManagerBase<Button>.JumpTo(String) DialogueManagerBase<Button>.DisplayDialogue() DialogueManagerBase<Button>.InvokeFunctions(Dictionary<Int32, String>) DialogueManagerBase<Button>.TryDisplayNextLine() DialogueManagerBase<Button>.DisplayChoices() DialogueManagerBase<Button>.GetDialogueMethods() DialogueManagerBase<Button>.DisplaySpeakerImage() DialogueManagerBase<Button>.ClearDialogueBox() DialogueManagerBase<Button>.CreateChoiceButton() DialogueManagerBase<Button>.ClearChoiceButton(DialogueManagerBase.ChoiceButtonHandle<>) DialogueManagerBase<Button>.RemoveChoiceButton(DialogueManagerBase.ChoiceButtonHandle<>) Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public class SimpleDialogueManager : DialogueManagerBase<Button> Methods PrepareChoiceButton(DialogueManagerBase<Button>.ChoiceButtonHandle, Choice) Declaration protected override void PrepareChoiceButton(DialogueManagerBase<Button>.ChoiceButtonHandle handle, Choice choice) Parameters Type Name Description DialogueManagerBase.ChoiceButtonHandle <> handle Choice choice Overrides Ibralogue.DialogueManagerBase<Button>.PrepareChoiceButton(Ibralogue.DialogueManagerBase.ChoiceButtonHandle<>, Choice)"
  },
  "ref/Ibralogue.TypewriterDialogueManager.html": {
    "href": "ref/Ibralogue.TypewriterDialogueManager.html",
    "title": "Class TypewriterDialogueManager | Ibralogue Docs",
    "keywords": "Class TypewriterDialogueManager Inheritance Object DialogueManagerBase < Button > SimpleDialogueManager TypewriterDialogueManager Inherited Members SimpleDialogueManager.PrepareChoiceButton(DialogueManagerBase.ChoiceButtonHandle<>, Choice) DialogueManagerBase<Button>.OnConversationStart DialogueManagerBase<Button>.OnConversationEnd DialogueManagerBase<Button>.ParsedConversations DialogueManagerBase<Button>._currentConversation DialogueManagerBase<Button>._lineIndex DialogueManagerBase<Button>._linePlaying DialogueManagerBase<Button>.scrollSpeed DialogueManagerBase<Button>.nameText DialogueManagerBase<Button>.sentenceText DialogueManagerBase<Button>.speakerPortrait DialogueManagerBase<Button>.choiceButtonHolder DialogueManagerBase<Button>.choiceButton DialogueManagerBase<Button>._choiceButtonInstances DialogueManagerBase<Button>.StartConversation(DialogueAsset, Int32) DialogueManagerBase<Button>.StopConversation() DialogueManagerBase<Button>.JumpTo(String) DialogueManagerBase<Button>.InvokeFunctions(Dictionary<Int32, String>) DialogueManagerBase<Button>.TryDisplayNextLine() DialogueManagerBase<Button>.DisplayChoices() DialogueManagerBase<Button>.GetDialogueMethods() DialogueManagerBase<Button>.DisplaySpeakerImage() DialogueManagerBase<Button>.CreateChoiceButton() DialogueManagerBase<Button>.ClearChoiceButton(DialogueManagerBase.ChoiceButtonHandle<>) DialogueManagerBase<Button>.RemoveChoiceButton(DialogueManagerBase.ChoiceButtonHandle<>) Namespace : Ibralogue Assembly : cs.temp.dll.dll Syntax public class TypewriterDialogueManager : SimpleDialogueManager Methods ClearDialogueBox() Declaration protected override void ClearDialogueBox() Overrides Ibralogue.DialogueManagerBase<Button>.ClearDialogueBox() Remarks This override additionally sets maxVisibleCharacters to zero.> DisplayDialogue() The DisplayDialogue coroutine displays the dialogue character by character in a scrolling manner and sets all other relevant values. Declaration protected override IEnumerator DisplayDialogue() Returns Type Description IEnumerator Overrides Ibralogue.DialogueManagerBase<Button>.DisplayDialogue() InvokeFunctionsTimed(Int32, Dictionary<Int32, String>) Invokes all the functions in a line timed according to the current visible character. Declaration protected void InvokeFunctionsTimed(int index, Dictionary<int, string> functionInvocations) Parameters Type Name Description Int32 index The index of the current visible character. Dictionary < Int32 , String > functionInvocations The list of invocations in the Dialogue to be invoked. SkipLineAnimation() Skip the typewriter animation of the sentence. Declaration public void SkipLineAnimation() TryAdvanceDialogue() Skips the line animation if it is still playing; otherwise, attempts to display the next line. Declaration protected void TryAdvanceDialogue()"
  }
}